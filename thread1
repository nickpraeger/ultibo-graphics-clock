unit Thread1;

{$mode objfpc}{$H+}

interface
uses
    RaspberryPi,
    GlobalConfig,
    GlobalConst,
    GlobalTypes,
    Platform,
    Threads,
    SysUtils,
    Classes,
    Ultibo,       {The Ultibo unit provides some APIs for getting and setting timezones}
    Console,
    GraphicsConsole,
    freetypeh,
    Devices,
    I2C,
    DS1307,       {This unit allows configuration and use of the RTC}
    RTC,          {useful RTC functions}
    Keyboard,     {Keyboard uses USB so that will be included automatically}
    DWCOTG,       {We need to include the USB host driver for the Raspberry Pi}
    Timezone,
    DateUtils;
var
s:string;


function Thread1Execute(Parameter:Pointer):PtrInt;

implementation

function Thread1Execute(Parameter:Pointer):PtrInt;


const

RightNow:int64 = 131916290000000000;   //  2019/01/10 21:23:20 GMT
OneYear:int64 =3652425*24*60*60*1000;
OneMonth:int64 =30*24*60*60*10000000;
OneDay:int64 =24*60*60*10000000;
OneHour:int64 =60*60*10000000;
OneMin:int64 =60*10000000;
OneSec:int64 = 10000000;



var
Console1:TWindowHandle;
Character:Char = #0;  {keyboard presses}
newDateTime: int64 =0; {for changing RTC time}
adjustment: int64 =0; //for adjusting date time
adjYear: int64 =0;
adjMonth: int64 =0;
adjDay: int64 =0;
adjHour: int64 =0;
adjMin: int64 =0;

procedure Log (message : string);
begin
   ConsoleWindowWriteLn (Console1, message);
   s:=message;
end;

begin
  Thread1Execute:=0;

//   Console1:=ConsoleWindowCreate(ConsoleDeviceGetDefault,CONSOLE_POSITION_BOTTOM,False);

   ThreadSetName(GetCurrentThreadId,'Example Thread1');
 {see if the RTC is available}
 SetCurrentTimezone('GMT Standard Time');
 while RTCAvailable = FALSE do
      begin
        Log('RTC Not Available' + DateTimeToStr(Now));
        RightNow:=RightNow + OneSec;
       threadsleep(1000);
      end;

 if RTCAvailable then
     begin
     Log('RTC Available' + DateTimeToStr(Now));
     if (RTCGetTime < RightNow) then
         begin
     Log('RTC Updated');
     RtcSetTime(RightNow);
     Log(DateTimeToStr(Now));
     Log(' ');
     end;
     Log(' ');
    end;

  while True do
  begin

   {Read a character from the global keyboard buffer. If multiple keyboards are connected all characters will end up in a single buffer and be received here}
   if ConsoleGetKey(Character,nil) then
   begin
   newDateTime:= 0;
   case Character of
        #0:  begin     {if shift is held for increasing values, read second character}
                  ConsoleGetKey(Character,nil);
                  end;
        '7':  begin
                adjYear:= adjYear+1;
                Log('Change year by ' + IntToStr(adjYear));
                end;
        '8': begin
                adjMonth:= adjMonth+1;
                Log('Change month by ' + IntToStr(adjMonth));
                end;
        '9': begin
                adjDay:= adjDay+1;
                Log('Change day by ' + IntToStr(adjDay));
                end;
        '1': begin
                  adjHour:= adjHour+1;
                Log('Change hour by ' + IntToStr(adjHour));
                end;
        '3': begin
                adjMin:= adjMin+1;
                Log('Change minute by ' + IntToStr(adjMin));
                end;

        '4': begin
                adjYear:= adjYear-1;
                Log('Change year by ' + IntToStr(adjYear));
                end;
      '5': begin
              adjMonth:= adjMonth-1;
              Log('Change month by ' + IntToStr(adjMonth));
              end;
      '6':  begin
              adjDay:= adjDay-1;
              Log('Change day by ' + IntToStr(adjDay));
              end;
      '0': begin
              adjHour:= adjHour-1;
            Log('Change hour by ' + IntToStr(adjHour));
            end;
      '.': begin
           adjMin:= adjMin-1;
           Log('Change minute by ' + IntToStr(adjMin));
           end;

      #13: begin
                  adjustment:=adjYear*OneYear+adjMonth*OneMonth+adjDay*OneDay+adjHour*OneHour+adjMin*OneMin;
                  Log('Enter to change time by: ' + IntToStr(adjYear) + '/' + IntToStr(adjMonth) + '/' + IntToStr(adjDay) + ' ' + IntToStr(adjHour) + ':' + IntToStr(adjMin));
                  if ConsoleGetKey(Character,nil) then
                  begin
                     if Character = #13  then begin
                        newDateTime:= SysRtcGetTime+adjustment;
                        RTCSetTime(newDateTime);
                        ClockSetTime(newDateTime,True);
                       Log('');
                        end
                     else begin
                          Log('Adjustments cleared');
                          adjustment:=0;
                          adjYear:=0;
                          adjMonth:=0;
                          adjDay:=0;
                          adjHour:=0;
                          adjMin:=0;
                          sleep(500);
                          Log('');
                          end;
                         end;
                     end;
     end;    {end of  case statement}

   end;      {end of if button pressed statement}

   end;    {end of loop}

    end;
   end.

